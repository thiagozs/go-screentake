name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Validate SemVer tag (vMAJOR.MINOR.PATCH[-PRERELEASE][+BUILD])
        shell: bash
        run: |
          ref="$GITHUB_REF_NAME"
          if [[ ! "$ref" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z\.-]+)?(\+[0-9A-Za-z\.-]+)?$ ]]; then
            echo "Invalid tag: $ref" >&2
            echo "Expected format: vMAJOR.MINOR.PATCH or with optional -PRERELEASE and +BUILD" >&2
            exit 1
          fi

  linux-amd64:
    needs: validate-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Install Linux deps (X11/OpenGL/ALSA)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential xorg-dev libgl1-mesa-dev libasound2-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev
      - name: Build linux amd64
        run: GOOS=linux GOARCH=amd64 make release-one VERSION=${GITHUB_REF_NAME#v}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: dist/*linux-amd64*

  linux-arm64:
    needs: validate-tag
    runs-on: ubuntu-24.04-arm64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Install Linux deps (X11/OpenGL/ALSA)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential xorg-dev libgl1-mesa-dev libasound2-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev
      - name: Build linux arm64
        run: GOOS=linux GOARCH=arm64 make release-one VERSION=${GITHUB_REF_NAME#v}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: dist/*linux-arm64*
    timeout-minutes: 45
    continue-on-error: true

  windows-amd64:
    needs: validate-tag
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Install build tools (make, 7zip, MinGW)
        run: |
          choco install make -y
          choco install 7zip -y
          choco install mingw -y
          echo "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
      - name: Build windows amd64
        run: |
          $env:GOOS = 'windows'
          $env:GOARCH = 'amd64'
          $env:CGO_ENABLED = '1'
          $env:CC = 'gcc'
          make release-one VERSION=${env:GITHUB_REF_NAME.TrimStart('refs/tags/v')}
        shell: pwsh
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/*windows-amd64*

  macos-amd64:
    needs: validate-tag
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Setup macOS build env
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
      - name: Build darwin amd64
        run: CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 make release-one VERSION=${GITHUB_REF_NAME#v}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-amd64
          path: dist/*darwin-amd64*

  macos-arm64:
    needs: validate-tag
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Setup macOS build env
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
      - name: Build darwin arm64
        run: CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 make release-one VERSION=${GITHUB_REF_NAME#v}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: dist/*darwin-arm64*

  publish:
    needs: [linux-amd64, windows-amd64, macos-amd64, macos-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Checkout (para obter CHANGELOG)
        uses: actions/checkout@v4
      - name: Flatten artifacts
        run: |
          mkdir -p release
          find dist -type f -name '*.tar.gz' -exec cp {} release/ \;
          find dist -type f -name '*.zip' -exec cp {} release/ \;
      - name: Generate checksums
        run: |
          cd release
          sha256sum * > SHA256SUMS.txt
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/*
          body_path: CHANGELOG.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
